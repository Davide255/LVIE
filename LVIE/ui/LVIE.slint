//standard widgets
import { VerticalBox, Button , HorizontalBox } from "std-widgets.slint";
//custom widget and theme colors
import { Screen, ScreenCallbacks, MaskCallbacks, CurveCallbacks } from "widgets/screen.slint";
import { Palette } from "color/palette.slint";
import { Toolbar, ToolbarCallbacks, Spacer, AlertType } from "widgets/toolbar.slint";
import { SettingsScreen, SettingsCallbacks } from "widgets/settings.slint";

component LVIE inherits Window {
    title: "LVIE";

    background: Palette.Dark.Dark-100;

    preferred-width: 1000px;
    preferred-height: 1000px * 9 / 16;

    padding: 0;

    in-out property <AlertType> AlertBoxType: AlertType.Null;
    in-out property <string> AlertText: "";

    in-out property <[string]> svg_path;
    in-out property <[image]> new_histogram;

    in-out property <image> image <=> content.image;
    in-out property <image> curve <=> content.curve;
    
    in-out property <[[float]]> curve_points <=> content.curve_points;
    in-out property <[[float]]> mask_points <=> content.mask_points;
    in-out property <[[float]]> bezier_control_points <=> content.bezier_control_points;
    in-out property <[[float]]> connection_line_points <=> content.connection_line;
    in-out property <[[float]]> control_point_connection_line <=> content.control_point_connection_line;

    in-out property <physical-length> image-space-size-width: content.image-space-size-width;

    callback handle-shortcut(string, bool, bool, bool);

    key_handler := FocusScope {

        tb := Toolbar {
            AlertBoxType: AlertBoxType;
            AlertText: AlertText;
            height: 40px;
            width: root.width;
            x: 0px;
            y: 0px;
            open-settings => {
                black-screen.visible = true;
                settings.visible = true;
            }
        }

        Spacer {
            bgcolor: Palette.Dark.Dark-200;
            x: 10px;
            y: tb.height;
            width: root.width - 20px;
        }

        content := Screen {
            histogram: svg-path;
            new_histogram: new_histogram;
            height: root.height - tb.height;
            width: root.width;
            x: 0px;
            y: tb.height;
        }

        black_screen := Rectangle {
            x: 0;
            y: 0;
            width: root.width;
            height: root.height;
            background: Colors.black.transparentize(0.4);
            visible: false;
        }

        settings := SettingsScreen {
            x: parent.width / 5;
            y: parent.height / 5;
            width: parent.width * 3 / 5;
            height: parent.height * 3 / 5;
            visible: false;
            on-validate => {
                black-screen.visible = false;
                settings.visible = false;
            }
            on-cancel => {
                black-screen.visible = false;
                settings.visible = false;
            }
        }


        key-pressed(event) => {
            handle-shortcut(event.text, event.modifiers.alt, event.modifiers.control, event.modifiers.shift);
            return EventResult.accept;
        }
    }

    init => {
        key-handler.focus();
    }
}

export { LVIE, ToolbarCallbacks, ScreenCallbacks, MaskCallbacks, CurveCallbacks, SettingsCallbacks }