//standard widgets
import { VerticalBox, Button , HorizontalBox } from "std-widgets.slint";
//custom widget and theme colors
import { Screen, ScreenCallbacks } from "widgets/screen.slint";
import { Palette } from "color/palette.slint";
import { Toolbar, ToolbarCallbacks, Spacer, AlertType } from "widgets/toolbar.slint";

component LVIE inherits Window {

    title: "LVIE";

    background: Palette.Dark.Dark-100;

    preferred-width: 1000px;
    preferred-height: 1000px / 16 * 9;

    padding: 0;

    in-out property <AlertType> AlertBoxType: AlertType.Null;
    in-out property <string> AlertText: "";

    in-out property <[string]> svg_path;

    in-out property <image> image <=> content.image;
    in-out property <image> curve <=> content.curve;
    in-out property <[[float]]> curve_points <=> content.curve_points;
    in-out property <physical-length> image-space-size-width: content.image-space-size-width;

    callback to-lowercase(string) -> string;

    function handle-shortcuts(event: KeyEvent) {
        if (to-lowercase(event.text) == "o" && event.modifiers.control) {
            ToolbarCallbacks.open-file();
        } else if (to-lowercase(event.text) == "r" && event.modifiers.control && event.modifiers.shift) {
            ToolbarCallbacks.rotate-90-deg();
        } else if (to-lowercase(event.text) == "s" && event.modifiers.control){
            debug("exporting")
        }
    }

    key_handler := FocusScope {

        tb := Toolbar {
            AlertBoxType: AlertBoxType;
            AlertText: AlertText;
            height: 40px;
            width: root.width;
            x: 0px;
            y: 0px;
        }

        Spacer {
            bgcolor: Palette.Dark.Dark-200;
            x: 10px;
            y: tb.height;
            width: root.width - 20px;
        }

        

        content := Screen {
            histogram: svg-path;
            height: root.height - tb.height;
            width: root.width;
            x: 0px;
            y: tb.height;
        }


        key-pressed(event) => {
            handle-shortcuts(event);
            return EventResult.accept;
        }
    }

    init => {
        key-handler.focus();
    }
}

export { LVIE, ToolbarCallbacks, ScreenCallbacks, AlertType }