import { VerticalBox, HorizontalBox, ComboBox } from "std-widgets.slint";

global CurveCallbacks {
    callback update-curve([[float]]);
    callback update-history(int, float, float);
    callback there-is-a-curve-point(length, length, length, length, length) -> int;
    callback remove-curve-point(int);
    callback add-curve-point(float, float) -> int;
    callback set-curve-type(int);
}

component Curve inherits VerticalBox {

    in-out property <[[float]]> curve_points;
    in-out property <image> source <=> plot.source;

    Rectangle {
        background: transparent;
        border-radius: 7px;
        border-width: 2px;
        border-color: black;
        width: parent.width - parent.width * 5%;
        height: self.width;
        plot := Image {
            image-fit: fill;
            width: parent.width -5px;
            height: parent.height - 5px;
    
            for pos[index] in curve_points: Rectangle {
                property <int> id: index;
                
                x: parent.width * pos[0] / 100 - self.width / 2;
                y: parent.height * (100 - pos[1]) / 100 - self.height / 2;
                height: 10px;
                width: 10px;
                border-radius: 5px;
                border-color: black;
                border-width: 2px;
            }
    
            plot_touch := TouchArea {
                property <int> cid: -1;
                property <float> ox;
                property <float> oy;

                mouse-cursor: MouseCursor.pointer;
    
                pointer-event(e) => {
                    if (e.kind == PointerEventKind.down && e.button == PointerEventButton.left) {
                        self.cid = CurveCallbacks.there-is-a-curve-point(
                            self.mouse-x, self.mouse-y, self.width, self.height, 10px
                            );
                        if (self.cid == -1) {
                            self.cid = CurveCallbacks.add-curve-point((self.mouse-x / self.width) * 100.0, 
                                Math.clamp(100 - (self.mouse-y * 100 / parent.height), 0, 100));
                        }
                        self.ox = curve_points[self.cid][0];
                        self.oy = curve_points[self.cid][1];
                    } else if (e.kind == PointerEventKind.down && e.button == PointerEventButton.right) {
                        CurveCallbacks.remove-curve-point(CurveCallbacks.there-is-a-curve-point(
                            self.mouse-x, self.mouse-y, self.width, self.height, 10px
                        ));
                    } else if (e.kind == PointerEventKind.up) {
                        if (self.ox != curve_points[self.cid][0] || self.oy != curve_points[self.cid][1]) {
                            CurveCallbacks.update-history(self.cid, self.ox, self.oy);
                        }
                        self.cid = -1;
                    }
                }
    
                moved => {
                    if (self.cid >= 0 && self.pressed) {
                        if (self.cid != 0 && self.cid != curve_points.length - 1){
                            curve_points[self.cid][0] = Math.clamp(
                                self.mouse-x * 100 / parent.width, 0, 100
                            );
                        }
                        curve_points[self.cid][1] = Math.clamp(
                            100 - (self.mouse-y * 100 / parent.height), 0, 100
                        );

                        if (abs(curve_points[self.cid][0] + curve_points[self.cid][1] - self.ox - self.oy) >= 0.01){
                            CurveCallbacks.update-curve(curve_points);
                        }
                    }
                }
            }
        }
    }
    
    HorizontalBox {
        width: parent.width - parent.width * 5%;
        Text {
            text: "Curve Type:";
            vertical-alignment: center;
            horizontal-alignment: left;
            font-size: parent.width * 7%;
            font-weight: 10;

        }
        curve_type := ComboBox {
            model: ["monotone", "smooth"];
            width: parent.width * 50%;
            current-index: 0;
            selected(v) => {
                CurveCallbacks.set-curve-type(self.current-index)
            }
        }
    }

}

export { Curve, CurveCallbacks }