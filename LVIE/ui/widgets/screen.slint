import { HorizontalBox , VerticalBox, Slider , Button , ScrollView, ComboBox , GridBox} from "std-widgets.slint";
import { Palette } from "../color/palette.slint";
import { CustomSlider } from "slider/slider.slint";
import { Filter } from "filter.slint";
import { ImageSpace, ImageTouchBehaviour, PointType, MaskCallbacks } from "imagespace.slint";
import { Curve, CurveCallbacks } from "curve.slint";

global ScreenCallbacks {
    callback add-box-blur(int);
    callback add-saturation(float);
    callback apply-filters(float, float, float, float, float, float, float);

    callback reset();
    callback undo();
    callback redo();
    callback update-history(float, float, float, float, float, float, float);
    callback set-Warning-Message(string);
    callback save-file(string);

    callback preview-click(length, length, length, length);
    callback keyboard_click(string, bool, bool, bool);
}

component Screen inherits HorizontalBox {
    in-out property <image> image <=> img.source;
    in-out property <length> image-space-size-width <=> img.width;
    //in-out property <[string]> histogram: ["","",""];

    in property <[image]> new_histogram;

    in-out property <image> curve <=> curve.source;
    in-out property <[[float]]> curve_points <=> curve.curve_points;

    in-out property <[[float]]> mask_points <=> img.mask_points;
    in-out property <[[float]]> bezier_control_points <=> img.bezier_control_points;
    in-out property <[[float]]> connection_line <=> img.connection_line;
    in-out property <[[float]]> control_point_connection_line <=> img.control_point_connection_line;

    property <[float]> _last_filter: [
        exposition.value, box-blur.value, gaussian-blur.value, sharpening.value, temp.value, tint.value, saturation.value
    ];

    spacing: 10px;

    function send-applyfilters() {
        ScreenCallbacks.apply-filters(
            exposition.value, box-blur.value, gaussian-blur.value, sharpening.value, 
            temp.value, tint.value, saturation.value
            );
    }

    function update-history() {
        ScreenCallbacks.update-history(
            _last_filter[0], _last_filter[1], _last_filter[2], _last_filter[3], _last_filter[4], _last_filter[5], _last_filter[6]
            );
    }

    callback update-values([float]);
    update-values(values) => {
        exposition.value = values[0];
        box-blur.value = values[1];
        gaussian-blur.value = values[2];
        sharpening.value = values[3];
        temp.value = values[4];
        tint.value = values[5];
        saturation.value = values[6];
    }

    left_area := Rectangle {
        background: Palette.Dark.Dark-300;
        border-radius: 7px;
        width: root.width * 20%;

        ScrollView {
            width: parent.width;
            padding: 2px;
            viewport-width: parent.width - 4px;
            x: 0px;

            VerticalBox {
                width: parent.width - 4px;
                spacing: 5px;
                padding: 2px;

                h_choice := ComboBox {
                    model: ["R", "G", "B", "All"];
                    current-index: 0;
                    width: 100px;
                    height: 30px;                 
                }
                Rectangle {
                    width: parent.width - parent.width * 5%;
                    height: self.width;
                    //x: 5px;
                    //y: 30px;
                    background: transparent;
                    border-radius: 7px;
                    border-width: 2px;
                    border-color: black;
                    Image {
                        width: parent.width - 5px;
                        height: parent.height - 5px;
                        source: new_histogram[h-choice.current-index];
                    }
                }

                curve := Curve {}
            
                temp := Filter {
                    name: "Temperature";
                    background: @linear-gradient(90deg, #0011ff 0%, #ffffff 50%, #f9ff56 100%);
                    on-press => {
                        _last_filter = [exposition.value, box-blur.value, gaussian-blur.value, sharpening.value, temp.value, tint.value, saturation.value];
                    }
                    on_move => { send-applyfilters(); }
                    on-release => {
                        update-history()
                    }
                }
            
                tint := Filter {
                    name: "Tint";
                    background: @linear-gradient(90deg, #f660f9 0%, #66ff00 100%);
                    on-press => {
                        _last_filter = [exposition.value, box-blur.value, gaussian-blur.value, sharpening.value, temp.value, tint.value, saturation.value];
                    }
                    on_move => { send-applyfilters(); }
                    on-release => {
                        update-history()
                    }
                }
                
                HorizontalBox {
                    Button {
                        text: "move";
                        enabled: img.touch_behaviour == ImageTouchBehaviour.MOVE? false : true;
                        clicked => {
                            img.touch_behaviour = ImageTouchBehaviour.MOVE
                        }
                    }
                    Button {
                        text: "mask";
                        enabled: img.touch_behaviour == ImageTouchBehaviour.MASK? false : true;
                        clicked => {
                            img.touch_behaviour = ImageTouchBehaviour.MASK
                        }
                    }
                }
            }
        }
    }

    img := ImageSpace {}

    right_area := VerticalBox {
        width: root.width * 20%;
        padding: 0;
        Rectangle {
            background: Palette.Dark.Dark-300;
            border-radius: 7px;
            ScrollView {
                width: parent.width;
                height: parent.height;
                padding: 0px;
                viewport-width: parent.width - 4px;

                VerticalBox {
                    width: parent.width - 4px;
                    spacing: 2px;
                    saturation := Filter {
                        name: "Saturation";
                        value: 0;
                        background: @linear-gradient(90deg, #515050 0%, #ff0000 100%);
                        on-press => {
                            _last_filter = [exposition.value, box-blur.value, gaussian-blur.value, sharpening.value, temp.value, tint.value, saturation.value];
                        }
                        on_move => {
                            send-applyfilters(); 
                        }
                        on-release => {
                            update-history()
                        }
                    }

                    sharpening := Filter {
                        name: "Sharpening";
                        value: 0;
                        minimum: 0.0;
                        maximum: 100.0;
                        percent: true;
                        decimals: 0;
                        on-press => {
                            _last_filter = [exposition.value, box-blur.value, gaussian-blur.value, sharpening.value, temp.value, tint.value, saturation.value];
                        }
                        on_move => { send-applyfilters(); }
                        on-release => {
                            update-history()
                        }
                    }

                    gaussian_blur := Filter {
                        name: "Gaussian Blur";
                        value: 0;
                        maximum: 30;
                        minimum: 0;
                        decimals: 0;
                    }

                    box_blur := Filter {
                        name: "Box Blur";
                        value: 0;
                        minimum: 0;
                        maximum: 30;
                        decimals: 0;
                    }

                    exposition := Filter {
                        name: "Exposition";
                        value: 0;
                        background: @linear-gradient(90deg, #000000 0%, #ffffff 100%);
                        on-press => {
                            _last_filter = [exposition.value, box-blur.value, gaussian-blur.value, sharpening.value, temp.value, tint.value, saturation.value];
                        }
                        on_move => { send-applyfilters(); }
                        on-release => {
                            update-history()
                        }
                    }

                    Button {
                        text: "apply filters";
                        max-height: 50px;
                        clicked => {
                            ScreenCallbacks.apply-filters(
                                exposition.value, round(box-blur.value), round(gaussian-blur.value), sharpening.value, 
                                temp.value, tint.value, saturation.value
                            );
                        }
                    }

                    Button {
                        text: "apply mask";
                        max-height: 50px;
                        clicked => {
                            MaskCallbacks.apply-mask();
                        }
                    }

                    Button {
                        text: "Reset";
                        max-height: 50px;
                        clicked => {
                            saturation.value = 0;
                            box-blur.value = 0;
                            temp.value = 0;
                            tint.value = 0;
                            exposition.value = 0;

                            img.zoom-reset();
                            
                            ScreenCallbacks.reset();
                        }
                    }
        
                    HorizontalBox {
                        max-height: 100px;
                        width: parent.width;
                        VerticalBox {
                            width: parent.width / 2;
                            Text {
                                text: "File name:";
                            }
                            
                            Rectangle {
                                border-color: black;
                                border-radius: 5px;
                                border-width: 2px;
                                width: parent.width;
                                padding: 2px;
                                tx := TextInput {
                                    width: parent.width - 4px;
                                    text: "prova.jpg";
                                }
                            }
                        }
                        Button {
                            text: "Save";
                            clicked => {
                                ScreenCallbacks.save-file(tx.text)
                            }
                        }
                    }
                }
            }
        }
    }
}

export { Screen, ScreenCallbacks, MaskCallbacks, CurveCallbacks }