import { HorizontalBox , VerticalBox, Slider , Button , ScrollView, ComboBox , GridBox} from "std-widgets.slint";
import { Palette } from "../color/palette.slint";
import { CustomSlider } from "slider/slider.slint";

global ScreenCallbacks {
    callback add-box-blur(int);
    callback add-saturation(float);
    callback apply-filters(float, float, float, float, float, float, float);
    callback update-curve([[float]]);
    callback reset();
    callback set-Warning-Message(string);
    callback save-file(string);

    callback preview-click(length, length, length, length);
    callback print(length);
}

component Screen inherits HorizontalBox {
    in-out property <image> image <=> img.source;
    in-out property <length> image-space-size-width <=> img.width;
    in-out property <[string]> histogram: ["","",""];
    in-out property <image> curve <=> plot.source;

    in-out property <[[float]]> curve_points;

    property <[color]> h_color: [Colors.red, Colors.green, Colors.blue];
    spacing: 10px;

    function send-applyfilters() {
        ScreenCallbacks.apply-filters(
            exposition.value, box-blur.value, gaussian-blur.value, sharpening.value, 
            temp.value, tint.value, saturation.value
            );
    }

    function zoom-in(x: length, y: length) {
                
        if (sv.width / 2.0) - (x + x * (5.0 / 100.0)) <= 0 {
            sv.viewport-x = 0;
        }
        else if (sv.width / 2.0) - (x + x * (5.0 / 100.0)) > sv.width - sv.viewport-width {
            sv.viewport-x = sv.width - sv.viewport-width;
        } else {
            sv.viewport-x = (sv.width / 2.0) - (x + x * (5.0 / 100.0));
        }

        if (sv.height / 2.0) - (y + y * (5.0 / 100.0)) <= 0 {
            sv.viewport-y = 0;
        }
        else if (sv.height / 2.0) - (y + y * (5.0 / 100.0)) > sv.height - sv.viewport-height {
            sv.viewport-x = sv.height - sv.viewport-height;
        }
        else {
            sv.viewport-y = (sv.height / 2.0) - (y + y * (5.0 / 100.0));
        }

        sv.viewport-width += sv.width * 5 / 100;
        sv.viewport-height += sv.height * 5 / 100;
    }

    function zoom-out() {
        sv.viewport-width = sv.width >= sv.viewport-width ? sv.width : sv.viewport-width - sv.width * 5 / 100;
        sv.viewport-x = Math.clamp(sv.viewport-x + sv.width * 5 / 100, 0, sv.width - sv.viewport-width);
        sv.viewport-height = sv.height >= sv.viewport-height ? sv.height : sv.viewport-height - sv.height * 5 / 100;
        sv.viewport-y = Math.clamp(sv.viewport-y + sv.height * 5 / 100, 0, sv.height - sv.viewport-height);
    }

    left_area := Rectangle {
        background: Palette.Dark.Dark-300;
        border-radius: 7px;
        width: root.width * 20%;
        ScrollView {
            width: parent.width;
            padding: 2px;
            x: 0px;

            VerticalBox {
                //height: auto;
                width: parent.width;
                spacing: 5px;
                padding: 2px;
                alignment: start;
                h_choice := ComboBox {
                    model: ["R", "G", "B", "all"];
                    current-index: 0;
                    width: 100px;
                    height: 30px;                 
                }
                if 0 <= h-choice.current-index && h-choice.current-index < 3:
                Rectangle {
                    width: parent.width - 30px;
                    height: (root.height - 30px) / 3;
                    //x: 5px;
                    //y: 30px;
                    background: transparent;
                    border-radius: 7px;
                    border-width: 2px;
                    border-color: black;
                    Path {
                        width: parent.width - 5px;
                        height: parent.height - 5px;
                        commands: histogram[h-choice.current-index];
                        stroke: h-color[h-choice.current-index];
                        stroke-width: 1px;
                        fill: self.stroke;
                    }
                }
                if h-choice.current-index == 3: Rectangle {
                    width: parent.width - 30px;
                    height: (root.height - 30px) / 3;
                    //x: 5px;
                    //y: 30px;
                    background: transparent;
                    border-radius: 7px;
                    border-width: 2px;
                    border-color: black;
                    for p in [0, 1, 2] :
                    Path {
                        width: parent.width - 5px;
                        height: parent.height - 5px;
                        commands: histogram[p];
                        stroke: h-color[p].transparentize(0.5);
                        stroke-width: 1px;
                        fill: self.stroke;
                    }
                }
                Rectangle {
                    width: parent.width - 30px;
                    height: (root.height - 30px) / 3;
                    //x: 5px;
                    //y: 30px;
                    background: transparent;
                    border-radius: 7px;
                    border-width: 2px;
                    border-color: black;
                    plot := Image {
                        image-fit: fill;
                        width: parent.width -5px;
                        height: parent.height - 5px;
                        property <length> ox;
                        property <length> oy;
                        property <int> cid;

                        for pos[index] in curve_points: Rectangle {
                            property <int> id: index;
                            x: parent.width * pos[0] / 100 - self.width / 2;
                            y: parent.height * (100 - pos[1]) / 100 - self.height / 2;
                            height: 10px;
                            width: 10px;
                            border-radius: 5px;
                            border-color: black;
                            border-width: 2px;
                            TouchArea {
                                pointer-event(e) => {
                                    if (e.kind == PointerEventKind.down && e.button == PointerEventButton.left) {
                                        debug("pressed", parent.id);
                                        plot.ox = parent.x;
                                        plot.oy = parent.y;
                                        plot.cid = parent.id;
                                    } else if (e.kind == PointerEventKind.move && plot.cid >= 0) {
                                        plt-touch.moved();
                                    } else if (e.kind == PointerEventKind.up) {
                                        debug("released", parent.id);
                                        plot.cid = -1;
                                    }
                                }
                            }
                        }

                        plt_touch := TouchArea {
                            moved => {
                                if (plot.cid >= 0) {
                                    debug(self.mouse-x, self.mouse-y);
                                    curve_points[plot.cid][0] = Math.clamp(
                                        ((parent.ox + self.mouse-x) - self.width / 2) * 100 / self.width, 0, 100
                                    );
                                    curve_points[plot.cid][1] = Math.clamp(
                                        100 - (((parent.oy + self.mouse-y) - self.height / 2) * 100 / self.height), 0, 100
                                    );
                                }
                            }
                        }
                    }
                }
                GridBox {
                    Row {
                        VerticalBox {
                            padding: 5px;
                            Text {
                                text: "temp: \{round(temp.value*100)/100}";
                                horizontal-alignment: center;
                                vertical-alignment: center;
                                font-size: 10px;
                            }
                            temp := CustomSlider {
                                height: 4px;
                                background: @linear-gradient(90deg, #0011ff 0%, #ffffff 50%, #f9ff56 100%);
                                on-move => {
                                    send-applyfilters();
                                }
                            }
                        }
                    }
                    Row {
                        VerticalBox {
                            padding: 5px;
                            Text {
                                text: "tint: \{round(tint.value*100)/100}";
                                horizontal-alignment: center;
                                vertical-alignment: center;
                                font-size: 10px;
                            }
                            tint := CustomSlider {
                                height: 4px;
                                background: @linear-gradient(90deg, #f660f9 0%, #66ff00 100%);
                                on-move => {
                                    send-applyfilters();
                                }
                            }
                        }
                    }
                }
            }
            //viewport-height: (self.width - 10px) * 3;
        }
    }

    Rectangle {
        sv := ScrollView {
            height: parent.height;
            width: parent.width;
            viewport-height: self.height;
            viewport-width: self.width;
            img := Image {
                image-fit: ImageFit.contain;
                width: parent.viewport-width;
                height: parent.viewport-height;
            }  
        }
        
        t := TouchArea {
            height: parent.height;
            width: parent.width;
    
            property <length> ovx;
            property <length> ovy;

            scroll-event(s) => {
                if s.delta-y / 1px == 60 {
                    zoom-in(self.mouse-x, self.mouse-y);
                } else if s.delta-y / 1px == -60 {
                    zoom-out();
                }
                EventResult.accept
            }

            pointer-event(event) => {
                if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                    self.ovx = sv.viewport-x;
                    self.ovy = sv.viewport-y;
                }
            }

            moved => {
                if (self.enabled && self.pressed) {
                    sv.viewport-x = Math.clamp(self.ovx + self.mouse-x - self.pressed-x, self.width - sv.viewport-width, 0);
                    sv.viewport-y = Math.clamp(self.ovy + self.mouse-y - self.pressed-y, self.height - sv.viewport-height, 0);
                }
            }
        }
    }

    right_area := VerticalBox {
        width: root.width * 20%;
        padding: 0;
        Rectangle {
            background: Palette.Dark.Dark-300;
            border-radius: 7px;
            GridBox {
                Row {
                    VerticalBox {
                        padding: 5px;
                        Text {
                            text: "saturation: \{round(saturation.value*100)/100}";
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            font-size: 10px;
                        }
                        saturation := CustomSlider {
                            //width: right-area.width - 10px;
                            height: 4px;
                            background: @linear-gradient(90deg, #515050 0%, #ff0000 100%);
                            on-move => {
                                send-applyfilters();
                            }
                        }
                    }
                }
                Row {
                    VerticalBox {
                        padding: 5px;
                        Text {
                            text: "Sharpening: \{sharpening.value}";
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            font-size: 10px;
                        }
                        sharpening := Slider {
                            value: 0;
                            maximum: 1;
                            minimum: 0;
                        }
                    }
                }
                Row {
                    VerticalBox {
                        padding: 5px;
                        Text {
                            text: "Gaussian Blur: \{round(gaussian_blur.value)}";
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            font-size: 10px;
                        }
                        gaussian_blur := Slider {
                            value: 0;
                            maximum: 30;
                            minimum: 0;
                        }
                    }
                }
                Row {
                    VerticalBox {
                        padding: 5px;
                        Text {
                            text: "Box Blur: \{round(box_blur.value)}";
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            font-size: 10px;
                        }
                        box_blur := Slider {
                            //width: right-area.width - 10px;
                            value: 0;
                            maximum: 30;
                            minimum: 0;
                        }
                    }
                }
                Row {
                    VerticalBox {
                        padding: 5px;
                        Text {
                            text: "exposition: \{exposition.value}";
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            font-size: 10px;
                        }
                        exposition := CustomSlider {
                            //width: right-area.width - 10px;
                            height: 4px;
                            background: @linear-gradient(90deg, #000000 0%, #ffffff 100%);
                        }
                    }
                }
                Row {
                    Path {
                        height: 100px;
                    stroke: white;
                    stroke-width: 2px;
                    MoveTo {
                        x: 20;
                        y: (100 - 20);
                    }
                    CubicTo {
                        x: 50;
                        y: 50;
                        control-1-x: 30;
                        control-1-y: 100-29;
                        control-2-x: 40;
                        control-2-y: 100-42;
                    }
                }}
                Row {
                    Button {
                        text: "apply filters";
                        clicked => {
                            ScreenCallbacks.apply-filters(
                                exposition.value, box-blur.value, gaussian-blur.value, sharpening.value, 
                                temp.value, tint.value, saturation.value
                            );
                        }
                    }
                }
                Row {
                    Button {
                        text: "Reset";
                        clicked => {
                            saturation.value = 0;
                            box-blur.value = 0;
                            temp.value = 0;
                            tint.value = 0;
                            exposition.value = 0;

                            sv.viewport-x = 0;
                            sv.viewport-y = 0;
                            sv.viewport-height = sv.height;
                            sv.viewport-width = sv.width;
                            
                            ScreenCallbacks.reset();
                        }
                    }
                }
                Row {
                    HorizontalBox {
                        tx := TextInput {
                            text: "prova.jpg";
                        }
                        Button {
                            text: "Save";
                            clicked => {
                                ScreenCallbacks.save-file(tx.text)
                            }
                        }
                    }
                }
            }
        }
    }
}

export { Screen, ScreenCallbacks }