import { HorizontalBox , VerticalBox, Slider , Button , ScrollView, ComboBox , GridBox} from "std-widgets.slint";
import { Palette } from "../color/palette.slint";
import { CustomSlider } from "slider/slider.slint";
import { Filter } from "filter.slint";
import { Linespace } from "canvas/line.slint";

enum PointType {
    None,
    MaskMain,
    MaskControl
}

global ScreenCallbacks {
    callback add-box-blur(int);
    callback add-saturation(float);
    callback apply-filters(float, float, float, float, float, float, float);

    callback update-curve([[float]]);
    callback there-is-a-curve-point(length, length, length, length, length) -> int;
    callback remove-curve-point(int);
    callback add-curve-point(float, float) -> int;
    callback set-curve-type(int);

    callback add-mask-point(float, float) -> int;
    callback there-is-a-mask-point(length, length, length, length, length) -> int;
    callback there-is-a-control-point(length, length, length, length, length) -> int;
    callback remove-mask-point(int);
    callback update-mask-point(int, float, float);
    callback update-control-point(int, float, float);
    callback update-mask([[float]]);
    callback close-mask-path();
    callback apply-mask();

    callback reset();
    callback set-Warning-Message(string);
    callback save-file(string);

    callback preview-click(length, length, length, length);
    callback keyboard_click(string, bool, bool, bool);
}

enum ImageTouchBehaviour {
    MOVE,
    MASK
}

component Screen inherits HorizontalBox {
    in-out property <image> image <=> img.source;
    in-out property <length> image-space-size-width <=> img.width;
    in-out property <[string]> histogram: ["","",""];
    in property <[image]> new_histogram;

    in-out property <image> curve <=> plot.source;
    in-out property <[[float]]> curve_points;

    in-out property <[[float]]> mask_points;
    in-out property <[[float]]> bezier_control_points;
    in-out property <[[float]]> connection_line;
    in-out property <[[float]]> control_point_connection_line;

    spacing: 10px;

    function send-applyfilters() {
        ScreenCallbacks.apply-filters(
            exposition.value, box-blur.value, gaussian-blur.value, sharpening.value, 
            temp.value, tint.value, saturation.value
            );
    }

    function zoom-in(x: length, y: length) {
                
        if (sv.width / 2.0) - (x + x * (5.0 / 100.0)) <= 0 {
            sv.viewport-x = 0;
        }
        else if (sv.width / 2.0) - (x + x * (5.0 / 100.0)) > sv.width - sv.viewport-width {
            sv.viewport-x = sv.width - sv.viewport-width;
        } else {
            sv.viewport-x = (sv.width / 2.0) - (x + x * (5.0 / 100.0));
        }

        if (sv.height / 2.0) - (y + y * (5.0 / 100.0)) <= 0 {
            sv.viewport-y = 0;
        }
        else if (sv.height / 2.0) - (y + y * (5.0 / 100.0)) > sv.height - sv.viewport-height {
            sv.viewport-x = sv.height - sv.viewport-height;
        }
        else {
            sv.viewport-y = (sv.height / 2.0) - (y + y * (5.0 / 100.0));
        }

        sv.viewport-width += sv.width * 5 / 100;
        sv.viewport-height += sv.height * 5 / 100;
    }

    function zoom-out() {
        sv.viewport-width = sv.width >= sv.viewport-width ? sv.width : sv.viewport-width - sv.width * 5 / 100;
        sv.viewport-x = Math.clamp(sv.viewport-x + sv.width * 5 / 100, 0, sv.width - sv.viewport-width);
        sv.viewport-height = sv.height >= sv.viewport-height ? sv.height : sv.viewport-height - sv.height * 5 / 100;
        sv.viewport-y = Math.clamp(sv.viewport-y + sv.height * 5 / 100, 0, sv.height - sv.viewport-height);
    }

    left_area := Rectangle {
        background: Palette.Dark.Dark-300;
        border-radius: 7px;
        width: root.width * 20%;

        ScrollView {
            width: parent.width;
            padding: 2px;
            viewport-width: parent.width - 4px;
            x: 0px;

            VerticalBox {
                width: parent.width - 4px;
                spacing: 5px;
                padding: 2px;

                h_choice := ComboBox {
                    model: ["R", "G", "B", "All"];
                    current-index: 0;
                    width: 100px;
                    height: 30px;                 
                }
                Rectangle {
                    width: parent.width - parent.width * 5%;
                    height: self.width;
                    //x: 5px;
                    //y: 30px;
                    background: transparent;
                    border-radius: 7px;
                    border-width: 2px;
                    border-color: black;
                    Image {
                        width: parent.width - 5px;
                        height: parent.height - 5px;
                        source: new_histogram[h-choice.current-index];
                    }
                }

                Rectangle {                
                    background: transparent;
                    border-radius: 7px;
                    border-width: 2px;
                    border-color: black;
                    width: parent.width - parent.width * 5%;
                    height: self.width;
                    plot := Image {
                        image-fit: fill;
                        width: parent.width -5px;
                        height: parent.height - 5px;
                
                        for pos[index] in curve_points: Rectangle {
                            property <int> id: index;
                            
                            x: parent.width * pos[0] / 100 - self.width / 2;
                            y: parent.height * (100 - pos[1]) / 100 - self.height / 2;
                            height: 10px;
                            width: 10px;
                            border-radius: 5px;
                            border-color: black;
                            border-width: 2px;
                        }
                
                        plot_touch := TouchArea {
                            property <int> cid: -1;
                            property <float> ox;
                            property <float> oy;

                            mouse-cursor: MouseCursor.pointer;
                
                            pointer-event(e) => {
                                if (e.kind == PointerEventKind.down && e.button == PointerEventButton.left) {
                                    self.cid = ScreenCallbacks.there-is-a-curve-point(
                                        self.mouse-x, self.mouse-y, self.width, self.height, 10px
                                        );
                                    if (self.cid == -1) {
                                        self.cid = ScreenCallbacks.add-curve-point((self.mouse-x / self.width) * 100.0, 
                                            Math.clamp(100 - (self.mouse-y * 100 / parent.height), 0, 100));
                                    }
                                    self.ox = curve_points[self.cid][0];
                                    self.oy = curve_points[self.cid][1];
                                } else if (e.kind == PointerEventKind.down && e.button == PointerEventButton.right) {
                                    ScreenCallbacks.remove-curve-point(ScreenCallbacks.there-is-a-curve-point(
                                        self.mouse-x, self.mouse-y, self.width, self.height, 10px
                                    ));
                                } else if (e.kind == PointerEventKind.up) {
                                    self.cid = -1;
                                }
                            }
                
                            moved => {
                                if (self.cid >= 0 && self.pressed) {
                                    if (self.cid != 0 && self.cid != curve_points.length - 1){
                                        curve_points[self.cid][0] = Math.clamp(
                                            self.mouse-x * 100 / parent.width, 0, 100
                                        );
                                    }
                                    curve_points[self.cid][1] = Math.clamp(
                                        100 - (self.mouse-y * 100 / parent.height), 0, 100
                                    );

                                    if (abs(curve_points[self.cid][0] + curve_points[self.cid][1] - self.ox - self.oy) >= 0.01){
                                        ScreenCallbacks.update-curve(curve_points);
                                    }
                                }
                            }
                        }
                    }
                }
                
                HorizontalBox {
                    width: parent.width - parent.width * 5%;
                    Text {
                        text: "Curve Type:";
                        vertical-alignment: center;
                        horizontal-alignment: left;
                        font-size: parent.width * 7%;
                        font-weight: 10;

                    }
                    curve_type := ComboBox {
                        model: ["monotone", "smooth"];
                        width: parent.width * 50%;
                        current-index: 0;
                        selected(v) => {
                            ScreenCallbacks.set-curve-type(self.current-index)
                        }
                    }
                }
            
            
                temp := Filter {
                    name: "Temperature";
                    background: @linear-gradient(90deg, #0011ff 0%, #ffffff 50%, #f9ff56 100%);
                    on_move => { send-applyfilters(); }
                }
            
                tint := Filter {
                    name: "Tint";
                    background: @linear-gradient(90deg, #f660f9 0%, #66ff00 100%);
                    on_move => { send-applyfilters(); }
                }
                
                HorizontalBox {
                    Button {
                        text: "move";
                        enabled: img.touch_behaviour == ImageTouchBehaviour.MOVE? false : true;
                        clicked => {
                            img.touch_behaviour = ImageTouchBehaviour.MOVE
                        }
                    }
                    Button {
                        text: "mask";
                        enabled: img.touch_behaviour == ImageTouchBehaviour.MASK? false : true;
                        clicked => {
                            img.touch_behaviour = ImageTouchBehaviour.MASK
                        }
                    }
                }
            }
            //viewport-height: (self.width - 10px) * 3;
        }
    }

    Rectangle {
        sv := ScrollView {
            height: parent.height;
            width: parent.width;
            viewport-height: self.height;
            viewport-width: self.width;
            img := Image {
                property <ImageTouchBehaviour> touch_behaviour: ImageTouchBehaviour.MOVE;
                property <color> mask_color: lightblue;
                property <length> mask_size: 2px;

                image-fit: ImageFit.contain;
                image-rendering: pixelated;
                width: parent.viewport-width;
                height: parent.viewport-height;
                
                Rectangle {
                    width: parent.width;
                    height: parent.height;
                    padding: 0;

                    //for point in control_point_connection_line:
                    //Rectangle {
                    //    width: 1px;
                    //    height: 1px;
//
                    //    background: gray;
//
                    //    x: parent.width * point[0] / 100 - self.width / 2;
                    //    y: parent.height * (100 - point[1]) / 100 - self.height / 2;
                    //}

                    for point in connection_line:
                    Rectangle {
                        width: mask_size;
                        height: mask_size;

                        background: mask_color;

                        x: parent.width * point[0] / 100 - self.width / 2;
                        y: parent.height * (100 - point[1]) / 100 - self.height / 2;
                    }

                    for cp[index] in bezier_control_points:
                    Rectangle{
                        property <int> id: index;

                        x: parent.width * cp[0] / 100 - self.width / 2;
                        y: parent.height * (100 - cp[1]) / 100 - self.height / 2;

                        height: 10px;
                        width: 10px;
                        border-radius: 5px;
                        border-color: gray;
                        background: gray;
                        border-width: 2px;
                    }

                    for pos[index] in mask_points:
                    Rectangle {
                        property <int> id: index;
                            
                        x: parent.width * pos[0] / 100 - self.width / 2;
                        y: parent.height * (100 - pos[1]) / 100 - self.height / 2;

                        height: 10px;
                        width: 10px;
                        border-radius: 5px;
                        border-color: blue;
                        background: blue;
                        border-width: 2px;
                    }
                }

            }
        }
        
        t := TouchArea {
            height: parent.height;
            width: parent.width;
            
            property <int> cid: -1;
            property <PointType> pt: PointType.None;
            property <length> ovx;
            property <length> ovy;

            property <float> ox;
            property <float> oy;

            mouse-cursor: MouseCursor.pointer;

            scroll-event(s) => {
                if s.delta-y / 1px == 60 {
                    zoom-in(self.mouse-x, self.mouse-y);
                } else if s.delta-y / 1px == -60 {
                    zoom-out();
                }
                EventResult.accept
            }

            pointer-event(event) => {
                if (img.touch_behaviour == ImageTouchBehaviour.MOVE) {
                    if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                        self.ovx = sv.viewport-x;
                        self.ovy = sv.viewport-y;
                    }
                } else if (img.touch_behaviour == ImageTouchBehaviour.MASK) {
                    if (event.kind == PointerEventKind.down && event.button == PointerEventButton.left) {
                        self.cid = ScreenCallbacks.there-is-a-mask-point(
                            self.mouse-x - sv.viewport-x, self.mouse-y - sv.viewport-y, img.width, img.height, 10px
                            );
                        if (self.cid == -1) {
                            self.cid = ScreenCallbacks.there-is-a-control-point(
                                self.mouse-x - sv.viewport-x, self.mouse-y - sv.viewport-y, img.width, img.height, 10px
                            );
                            if (self.cid == -1) {
                                self.cid = ScreenCallbacks.add-mask-point(((self.mouse-x - sv.viewport-x) / img.width) * 100.0, 
                                    Math.clamp(100 - ((self.mouse-y - sv.viewport-y) * 100 / img.height), 0, 100));
                                self.pt = PointType.MaskMain;
                            } else {
                                self.pt = PointType.MaskControl;
                            }
                        } else {
                            self.pt = PointType.MaskMain;
                        }
                        
                        if (self.cid == 0 && self.pt == PointType.MaskMain && mask_points.length > 1) {
                            ScreenCallbacks.close-mask-path();
                            img.mask_color = Colors.red;
                            img.mask_size = 2px;
                        }

                        if (self.pt == PointType.MaskMain) {
                            self.ox = mask_points[self.cid][0];
                            self.oy = mask_points[self.cid][1];
                        } else {
                            self.ox = bezier_control_points[2*Math.floor(self.cid / 10) + Math.mod(self.cid, 10)][0];
                            self.oy = bezier_control_points[2*Math.floor(self.cid / 10) + Math.mod(self.cid, 10)][1];
                        }
                    } else if (event.kind == PointerEventKind.down && event.button == PointerEventButton.right) {
                        ScreenCallbacks.remove-mask-point(ScreenCallbacks.there-is-a-mask-point(
                            self.mouse-x + sv.viewport-x, self.mouse-y + sv.viewport-y, img.width, img.height, 10px
                        ));
                    } else if (event.kind == PointerEventKind.up) {
                        self.cid = -1;
                        self.pt = PointType.None;
                    }
                }
            }

            moved => {
                if (img.touch_behaviour == ImageTouchBehaviour.MOVE) {
                    if (self.enabled && self.pressed) {
                        sv.viewport-x = Math.clamp(self.ovx + self.mouse-x - self.pressed-x, self.width - sv.viewport-width, 0);
                        sv.viewport-y = Math.clamp(self.ovy + self.mouse-y - self.pressed-y, self.height - sv.viewport-height, 0);
                    }
                } else if (img.touch_behaviour == ImageTouchBehaviour.MASK) {
                    if (self.cid >= 0 && self.pressed) {
                        if (self.pt == PointType.MaskMain) {
                            mask_points[self.cid][0] = Math.clamp(
                                (self.mouse-x - sv.viewport-x) * 100 / img.width, 0, 100
                            );
                            mask_points[self.cid][1] = Math.clamp(
                                100 - ((self.mouse-y - sv.viewport-y) * 100 / img.height), 0, 100
                            );

                            if (abs(mask_points[self.cid][0] + mask_points[self.cid][1] - self.ox - self.oy) >= 0.01){
                                ScreenCallbacks.update-mask-point(self.cid, mask_points[self.cid][0], mask_points[self.cid][1]);
                            }
                        } else {
                            bezier_control_points[2*Math.floor(self.cid / 10) + Math.mod(self.cid, 10)][0] = Math.clamp(
                                (self.mouse-x - sv.viewport-x) * 100 / img.width, 0, 100
                            );
                            bezier_control_points[2*Math.floor(self.cid / 10) + Math.mod(self.cid, 10)][1] = Math.clamp(
                                100 - ((self.mouse-y - sv.viewport-y) * 100 / img.height), 0, 100
                            );

                            if (abs(
                                bezier_control_points[2*Math.floor(self.cid / 10) + Math.mod(self.cid, 10)][0] 
                                + bezier_control_points[2*Math.floor(self.cid / 10) + Math.mod(self.cid, 10)][1] 
                                - self.ox - self.oy
                            ) >= 0.01){
                                ScreenCallbacks.update-control-point(self.cid, 
                                    bezier_control_points[2*Math.floor(self.cid / 10) + Math.mod(self.cid, 10)][0], 
                                    bezier_control_points[2*Math.floor(self.cid / 10) + Math.mod(self.cid, 10)][1]
                                );
                            }
                        }
                    }
                }
            }
        }
    }

    right_area := VerticalBox {
        width: root.width * 20%;
        padding: 0;
        Rectangle {
            background: Palette.Dark.Dark-300;
            border-radius: 7px;
            ScrollView {
                width: parent.width;
                height: parent.height;
                padding: 0px;
                viewport-width: parent.width - 4px;

                VerticalBox {
                    width: parent.width - 4px;
                    spacing: 2px;
                    saturation := Filter {
                        name: "Saturation";
                        background: @linear-gradient(90deg, #515050 0%, #ff0000 100%);
                        on_move => { send-applyfilters(); }
                    }

                    sharpening := Filter {
                        name: "Sharpening";
                        minimum: 0.0;
                        maximum: 100.0;
                        percent: true;
                        decimals: 0;
                        on_move => { send-applyfilters(); }
                    }

                    gaussian_blur := Filter {
                        name: "Gaussian Blur";
                        value: 0;
                        maximum: 30;
                        minimum: 0;
                        decimals: 0;
                    }

                    box_blur := Filter {
                        name: "Box Blur";
                        value: 0;
                        minimum: 0;
                        maximum: 30;
                        decimals: 0;
                    }

                    exposition := Filter {
                        name: "Exposition";
                        background: @linear-gradient(90deg, #000000 0%, #ffffff 100%);
                        on_move => { send-applyfilters(); }
                    }

                    Button {
                        text: "apply filters";
                        max-height: 50px;
                        clicked => {
                            ScreenCallbacks.apply-filters(
                                exposition.value, round(box-blur.value), round(gaussian-blur.value), sharpening.value, 
                                temp.value, tint.value, saturation.value
                            );
                        }
                    }

                    Button {
                        text: "apply mask";
                        max-height: 50px;
                        clicked => {
                            ScreenCallbacks.apply-mask();
                        }
                    }

                    Button {
                        text: "Reset";
                        max-height: 50px;
                        clicked => {
                            saturation.value = 0;
                            box-blur.value = 0;
                            temp.value = 0;
                            tint.value = 0;
                            exposition.value = 0;

                            sv.viewport-x = 0;
                            sv.viewport-y = 0;
                            sv.viewport-height = sv.height;
                            sv.viewport-width = sv.width;
                            
                            ScreenCallbacks.reset();
                        }
                    }
        
                    HorizontalBox {
                        max-height: 100px;
                        width: parent.width;
                        VerticalBox {
                            width: parent.width / 2;
                            Text {
                                text: "File name:";
                            }
                            
                            Rectangle {
                                border-color: black;
                                border-radius: 5px;
                                border-width: 2px;
                                width: parent.width;
                                padding: 2px;
                                tx := TextInput {
                                    width: parent.width - 4px;
                                    text: "prova.jpg";
                                }
                            }
                        }
                        Button {
                            text: "Save";
                            clicked => {
                                ScreenCallbacks.save-file(tx.text)
                            }
                        }
                    }
                }
            }
        }
    }
}

export { Screen, ScreenCallbacks, Linespace }